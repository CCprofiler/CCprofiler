% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complexFeatureGridSearch.R
\name{performComplexGridSearch}
\alias{performComplexGridSearch}
\title{Perform complex feature grid search}
\usage{
performComplexGridSearch(traces, complex_hypothesis, corrs = c(0.5, 0.75, 0.9,
  0.95), windows = c(8, 10, 12), smoothing = c(7, 9, 11),
  rt_heights = c(3, 4, 5), n_cores = 1)
}
\arguments{
\item{traces}{An object of class traces (type "protein").}

\item{corrs}{Numeric vector with correlation_cutoff values between 0 and 1. Default is c(0.5,0.75,0.9,0.95).}

\item{windows}{Positive integer vector of window_size values to test. Default is c(8,10,12).}

\item{smoothing}{Positive odd integer vector of smoothing_length values to test. Default is c(7,9,11).}

\item{rt_heights}{Positive integer vector of rt_height values to test. Default is c(3,4,5).}

\item{n_cores}{Positive integer specifying the number of cores to use. Default is 1.}
}
\value{
List of search result tables for every possible parameter combination.
The result tables contain additional columns specifying the parameters.
}
\description{
Perform complex feature finding (calls \code{\link{findComplexFeatures}})
with all possible combinations of the specified parameters (grid search).
}
\details{
The runtime of this function scales with the binomial coefficient of the total 
number of parameters specified, and can therefore take a long time. If many parameter combinations
are searched the use of multiple cores for parallel computation is strongly recommended.
}
\examples{

## Load example data
proteinTraces <- exampleProteinTraces
complexHypotheses <- exampleComplexHypotheses

## Perform a small grid search for 2 parameter combinations
gridList <- performComplexGridSearch(traces = proteinTraces,
                         complex_hypothesis = complexHypotheses,
                         corrs = c(0.5, 0.9),
                         windows = 10,
                         smoothing = 7,
                         rt_heights = 4,
                         n_cores = 2)
                         
lapply(gridList, head, n = 2)
}

